{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/suggest-recipe.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview Recipe suggestion, image generation, TTS, and substitution flows.\n *\n * - suggestRecipes - Suggests a list of recipes based on ingredients and cuisine.\n * - generateRecipeImage - Generates an image for a specific recipe name.\n * - synthesizeSpeech - Converts recipe instructions text to speech.\n * - suggestSubstitutions - Suggests substitutes for a given ingredient in a recipe.\n * - SuggestRecipesInput - The input type for the suggestRecipes function.\n * - Recipe - A single recipe object.\n * - SuggestRecipesOutput - The return type for the suggestRecipes function.\n * - GenerateRecipeImageInput - The input type for the generateRecipeImage function.\n * - GenerateRecipeImageOutput - The return type for the generateRecipeImage function.\n * - SynthesizeSpeechInput - The input type for the synthesizeSpeech function.\n * - SynthesizeSpeechOutput - The return type for the synthesizeSpeech function.\n * - SuggestSubstitutionsInput - The input type for the suggestSubstitutions function.\n * - Substitution - A single substitution object.\n * - SuggestSubstitutionsOutput - The return type for the suggestSubstitutions function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\nimport wav from 'wav';\n\n// Schema for recipe suggestion input\nconst SuggestRecipesInputSchema = z.object({\n  ingredients: z\n    .string()\n    .describe('បញ្ជីគ្រឿងផ្សំដែលមាន រាយដោយមានសញ្ញាក្បៀស។'),\n  cuisine: z.string().describe('ប្រភេទម្ហូបដែលចង់បាន (ឧ. ខ្មែរ, អ៊ីតាលី)។'),\n});\nexport type SuggestRecipesInput = z.infer<typeof SuggestRecipesInputSchema>;\n\n// Schema for a single recipe\nconst RecipeSchema = z.object({\n  recipeName: z.string().describe('ឈ្មោះរូបមន្តដែលបានណែនាំ។'),\n  description: z.string().describe('ការពិពណ៌នាសង្ខេប និងទាក់ទាញអំពីម្ហូប (១-២ ប្រយោគ)។'),\n  ingredients: z.string().describe('បញ្ជីគ្រឿងផ្សំដែលត្រូវការសម្រាប់រូបមន្ត។ បំបែកធាតុនីមួយៗដោយសញ្ញាបន្ទាត់ថ្មី (\\\\n)។'),\n  instructions: z.string().describe('ការណែនាំអំពីការរៀបចំរូបមន្តមួយជំហានម្តងៗ។ បំបែកជំហាននីមួយៗដោយសញ្ញាបន្ទាត់ថ្មី (\\\\n)។'),\n  estimatedCookingTime: z.string().describe('ពេលវេលាចម្អិនអាហារប៉ាន់ស្មាន (ឧ. 30 នាទី)។'),\n});\nexport type Recipe = z.infer<typeof RecipeSchema>;\n\n// Schema for the output of the recipe suggestion flow\nconst SuggestRecipesOutputSchema = z.object({\n  recipes: z.array(RecipeSchema),\n});\nexport type SuggestRecipesOutput = z.infer<typeof SuggestRecipesOutputSchema>;\n\n// Main function to suggest recipes\nexport async function suggestRecipes(\n  input: SuggestRecipesInput\n): Promise<SuggestRecipesOutput> {\n  return suggestRecipesFlow(input);\n}\n\nconst recipePrompt = ai.definePrompt({\n  name: 'recipePrompt',\n  input: {schema: SuggestRecipesInputSchema},\n  output: {\n    format: 'json',\n    schema: SuggestRecipesOutputSchema,\n  },\n  prompt: `You are a world-class chef specializing in creating delicious recipes based on available ingredients and cuisine preferences.\n\n  Please provide the entire response in Khmer (Cambodia).\n\n  Based on the provided ingredients and cuisine, suggest 8 distinct, excellent, detailed recipes. For each recipe, include a short, enticing description.\n\n  Ingredients: {{{ingredients}}}\n  Cuisine: {{{cuisine}}}\n\n  Ensure your response is a parsable JSON object that adheres to the provided schema.\n`,\n});\n\nconst suggestRecipesFlow = ai.defineFlow(\n  {\n    name: 'suggestRecipesFlow',\n    inputSchema: SuggestRecipesInputSchema,\n    outputSchema: SuggestRecipesOutputSchema,\n  },\n  async input => {\n    const {output} = await recipePrompt(input);\n    return output!;\n  }\n);\n\n\n// Schemas and flow for generating a recipe image\nconst GenerateRecipeImageInputSchema = z.object({\n    recipeName: z.string().describe(\"The name of the recipe to generate an image for.\"),\n});\nexport type GenerateRecipeImageInput = z.infer<typeof GenerateRecipeImageInputSchema>;\n\nconst GenerateRecipeImageOutputSchema = z.object({\n    imageUrl: z.string().describe(\"The data URI of the generated image.\"),\n});\nexport type GenerateRecipeImageOutput = z.infer<typeof GenerateRecipeImageOutputSchema>;\n\n\nexport async function generateRecipeImage(input: GenerateRecipeImageInput): Promise<GenerateRecipeImageOutput> {\n    return generateRecipeImageFlow(input);\n}\n\nconst generateRecipeImageFlow = ai.defineFlow(\n    {\n        name: 'generateRecipeImageFlow',\n        inputSchema: GenerateRecipeImageInputSchema,\n        outputSchema: GenerateRecipeImageOutputSchema,\n    },\n    async ({ recipeName }) => {\n        const prompt = `A photorealistic, beautifully lit, appetizing photo of a finished plate of ${recipeName}, traditional Khmer style.`;\n        \n        try {\n            const { media } = await ai.generate({\n                model: 'googleai/gemini-2.0-flash-preview-image-generation',\n                prompt: prompt,\n                config: {\n                    responseModalities: ['IMAGE'],\n                },\n            });\n\n            if (media?.url) {\n                return { imageUrl: media.url };\n            }\n             return { imageUrl: \"\" };\n\n        } catch (error) {\n             console.error(`Failed to generate image for \"${recipeName}\":`, error);\n             return { imageUrl: \"\" };\n        }\n    }\n);\n\n\n// Schemas and flow for Text-to-Speech\nconst SynthesizeSpeechInputSchema = z.object({\n    text: z.string().describe(\"The text to be converted to speech.\"),\n});\nexport type SynthesizeSpeechInput = z.infer<typeof SynthesizeSpeechInputSchema>;\n\nconst SynthesizeSpeechOutputSchema = z.object({\n    audioUrl: z.string().describe(\"The data URI of the generated audio file in WAV format.\"),\n});\nexport type SynthesizeSpeechOutput = z.infer<typeof SynthesizeSpeechOutputSchema>;\n\nexport async function synthesizeSpeech(input: SynthesizeSpeechInput): Promise<SynthesizeSpeechOutput> {\n    return synthesizeSpeechFlow(input);\n}\n\nasync function toWav(pcmData: Buffer, channels = 1, rate = 24000, sampleWidth = 2): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const writer = new wav.Writer({\n      channels,\n      sampleRate: rate,\n      bitDepth: sampleWidth * 8,\n    });\n\n    let bufs: Buffer[] = [];\n    writer.on('error', reject);\n    writer.on('data', (d) => bufs.push(d));\n    writer.on('end', () => resolve(Buffer.concat(bufs).toString('base64')));\n\n    writer.write(pcmData);\n    writer.end();\n  });\n}\n\nconst synthesizeSpeechFlow = ai.defineFlow(\n    {\n        name: 'synthesizeSpeechFlow',\n        inputSchema: SynthesizeSpeechInputSchema,\n        outputSchema: SynthesizeSpeechOutputSchema,\n    },\n    async ({ text }) => {\n        try {\n            const { media } = await ai.generate({\n                model: 'googleai/gemini-2.5-flash-preview-tts',\n                config: {\n                    responseModalities: ['AUDIO'],\n                    speechConfig: {\n                        voiceConfig: {\n                            prebuiltVoiceConfig: { voiceName: 'Algenib' },\n                        },\n                    },\n                },\n                prompt: text,\n            });\n\n            if (!media?.url) {\n                 throw new Error('No audio data returned from TTS model.');\n            }\n\n            const audioBuffer = Buffer.from(\n                media.url.substring(media.url.indexOf(',') + 1),\n                'base64'\n            );\n\n            const wavBase64 = await toWav(audioBuffer);\n            return { audioUrl: `data:audio/wav;base64,${wavBase64}` };\n\n        } catch (error) {\n            console.error('Failed to synthesize speech:', error);\n            return { audioUrl: '' };\n        }\n    }\n);\n\n// Schemas and flow for ingredient substitution\nconst SuggestSubstitutionsInputSchema = z.object({\n    recipeName: z.string().describe(\"The name of the recipe.\"),\n    ingredient: z.string().describe(\"The ingredient that needs a substitute.\"),\n});\nexport type SuggestSubstitutionsInput = z.infer<typeof SuggestSubstitutionsInputSchema>;\n\nconst SubstitutionSchema = z.object({\n    substitute: z.string().describe(\"The name of the substitute ingredient.\"),\n    amount: z.string().describe(\"The amount of the substitute to use.\"),\n    notes: z.string().describe(\"Any additional notes or instructions for using the substitute.\"),\n});\nexport type Substitution = z.infer<typeof SubstitutionSchema>;\n\nconst SuggestSubstitutionsOutputSchema = z.object({\n    substitutions: z.array(SubstitutionSchema),\n});\nexport type SuggestSubstitutionsOutput = z.infer<typeof SuggestSubstitutionsOutputSchema>;\n\nexport async function suggestSubstitutions(\n  input: SuggestSubstitutionsInput\n): Promise<SuggestSubstitutionsOutput> {\n  return suggestSubstitutionsFlow(input);\n}\n\nconst substitutionPrompt = ai.definePrompt({\n    name: 'substitutionPrompt',\n    input: { schema: SuggestSubstitutionsInputSchema },\n    output: {\n        format: 'json',\n        schema: SuggestSubstitutionsOutputSchema,\n    },\n    prompt: `You are an expert chef. For the recipe \"{{recipeName}}\", the user needs a substitute for the ingredient \"{{ingredient}}\".\n\n    Please provide 2-3 common, practical substitutions. For each substitution, provide the amount to use and any relevant notes.\n\n    Please provide the entire response in Khmer (Cambodia).\n\n    Ensure your response is a parsable JSON object that adheres to the provided schema.\n    `,\n});\n\nconst suggestSubstitutionsFlow = ai.defineFlow(\n    {\n        name: 'suggestSubstitutionsFlow',\n        inputSchema: SuggestSubstitutionsInputSchema,\n        outputSchema: SuggestSubstitutionsOutputSchema,\n    },\n    async (input) => {\n        const { output } = await substitutionPrompt(input);\n        return output!;\n    }\n);\n"],"names":[],"mappings":";;;;;;;;AAGA;;;;;;;;;;;;;;;;;CAiBC,GAED;AACA;AAAA;AACA;;;;;;;AAEA,qCAAqC;AACrC,MAAM,4BAA4B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzC,aAAa,uIAAA,CAAA,IAAC,CACX,MAAM,GACN,QAAQ,CAAC;IACZ,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC/B;AAGA,6BAA6B;AAC7B,MAAM,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5B,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,sBAAsB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC5C;AAGA,sDAAsD;AACtD,MAAM,6BAA6B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,SAAS,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC;AACnB;AAIO,eAAe,eACpB,KAA0B;IAE1B,OAAO,mBAAmB;AAC5B;AAEA,MAAM,eAAe,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACnC,MAAM;IACN,OAAO;QAAC,QAAQ;IAAyB;IACzC,QAAQ;QACN,QAAQ;QACR,QAAQ;IACV;IACA,QAAQ,CAAC;;;;;;;;;;AAUX,CAAC;AACD;AAEA,MAAM,qBAAqB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACtC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,aAAa;IACpC,OAAO;AACT;AAIF,iDAAiD;AACjD,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5C,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACpC;AAGA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7C,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAClC;AAIO,eAAe,oBAAoB,KAA+B;IACrE,OAAO,wBAAwB;AACnC;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,UAAU,CACzC;IACI,MAAM;IACN,aAAa;IACb,cAAc;AAClB,GACA,OAAO,EAAE,UAAU,EAAE;IACjB,MAAM,SAAS,CAAC,2EAA2E,EAAE,WAAW,0BAA0B,CAAC;IAEnI,IAAI;QACA,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,mHAAA,CAAA,KAAE,CAAC,QAAQ,CAAC;YAChC,OAAO;YACP,QAAQ;YACR,QAAQ;gBACJ,oBAAoB;oBAAC;iBAAQ;YACjC;QACJ;QAEA,IAAI,OAAO,KAAK;YACZ,OAAO;gBAAE,UAAU,MAAM,GAAG;YAAC;QACjC;QACC,OAAO;YAAE,UAAU;QAAG;IAE3B,EAAE,OAAO,OAAO;QACX,QAAQ,KAAK,CAAC,CAAC,8BAA8B,EAAE,WAAW,EAAE,CAAC,EAAE;QAC/D,OAAO;YAAE,UAAU;QAAG;IAC3B;AACJ;AAIJ,sCAAsC;AACtC,MAAM,8BAA8B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC9B;AAGA,MAAM,+BAA+B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAClC;AAGO,eAAe,iBAAiB,KAA4B;IAC/D,OAAO,qBAAqB;AAChC;AAEA,eAAe,MAAM,OAAe,EAAE,WAAW,CAAC,EAAE,OAAO,KAAK,EAAE,cAAc,CAAC;IAC/E,OAAO,IAAI,QAAQ,CAAC,SAAS;QAC3B,MAAM,SAAS,IAAI,4HAAA,CAAA,UAAG,CAAC,MAAM,CAAC;YAC5B;YACA,YAAY;YACZ,UAAU,cAAc;QAC1B;QAEA,IAAI,OAAiB,EAAE;QACvB,OAAO,EAAE,CAAC,SAAS;QACnB,OAAO,EAAE,CAAC,QAAQ,CAAC,IAAM,KAAK,IAAI,CAAC;QACnC,OAAO,EAAE,CAAC,OAAO,IAAM,QAAQ,OAAO,MAAM,CAAC,MAAM,QAAQ,CAAC;QAE5D,OAAO,KAAK,CAAC;QACb,OAAO,GAAG;IACZ;AACF;AAEA,MAAM,uBAAuB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACtC;IACI,MAAM;IACN,aAAa;IACb,cAAc;AAClB,GACA,OAAO,EAAE,IAAI,EAAE;IACX,IAAI;QACA,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,mHAAA,CAAA,KAAE,CAAC,QAAQ,CAAC;YAChC,OAAO;YACP,QAAQ;gBACJ,oBAAoB;oBAAC;iBAAQ;gBAC7B,cAAc;oBACV,aAAa;wBACT,qBAAqB;4BAAE,WAAW;wBAAU;oBAChD;gBACJ;YACJ;YACA,QAAQ;QACZ;QAEA,IAAI,CAAC,OAAO,KAAK;YACZ,MAAM,IAAI,MAAM;QACrB;QAEA,MAAM,cAAc,OAAO,IAAI,CAC3B,MAAM,GAAG,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,OAAO,CAAC,OAAO,IAC7C;QAGJ,MAAM,YAAY,MAAM,MAAM;QAC9B,OAAO;YAAE,UAAU,CAAC,sBAAsB,EAAE,WAAW;QAAC;IAE5D,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO;YAAE,UAAU;QAAG;IAC1B;AACJ;AAGJ,+CAA+C;AAC/C,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7C,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACpC;AAGA,MAAM,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChC,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC/B;AAGA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,eAAe,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC;AAC3B;AAGO,eAAe,qBACpB,KAAgC;IAEhC,OAAO,yBAAyB;AAClC;AAEA,MAAM,qBAAqB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACvC,MAAM;IACN,OAAO;QAAE,QAAQ;IAAgC;IACjD,QAAQ;QACJ,QAAQ;QACR,QAAQ;IACZ;IACA,QAAQ,CAAC;;;;;;;IAOT,CAAC;AACL;AAEA,MAAM,2BAA2B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC1C;IACI,MAAM;IACN,aAAa;IACb,cAAc;AAClB,GACA,OAAO;IACH,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,mBAAmB;IAC5C,OAAO;AACX;;;IAlNkB;IAmDA;IA8CA;IAiFA;;AAlLA,+OAAA;AAmDA,+OAAA;AA8CA,+OAAA;AAiFA,+OAAA","debugId":null}},
    {"offset": {"line": 490, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\"use server\";\n\nimport { \n  suggestRecipes,\n  type SuggestRecipesInput, \n  type SuggestRecipesOutput,\n  generateRecipeImage,\n  type GenerateRecipeImageInput,\n  type GenerateRecipeImageOutput,\n  synthesizeSpeech,\n  type SynthesizeSpeechInput,\n  type SynthesizeSpeechOutput,\n  suggestSubstitutions,\n  type SuggestSubstitutionsInput,\n  type SuggestSubstitutionsOutput,\n} from '@/ai/flows/suggest-recipe';\n\nexport async function getRecipeSuggestion(\n  data: SuggestRecipesInput\n): Promise<{ success: boolean; data: SuggestRecipesOutput | null; error: string | null; }> {\n  try {\n    const result = await suggestRecipes(data);\n    return { success: true, data: result, error: null };\n  } catch (error) {\n    console.error(error);\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to get recipe suggestion: ${errorMessage}` };\n  }\n}\n\nexport async function getRecipeImage(\n  data: GenerateRecipeImageInput\n): Promise<{ success: boolean; data: GenerateRecipeImageOutput | null; error: string | null; }> {\n   try {\n    const result = await generateRecipeImage(data);\n    return { success: true, data: result, error: null };\n  } catch (error) {\n    console.error(error);\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to get recipe image: ${errorMessage}` };\n  }\n}\n\nexport async function getTextToSpeech(\n  data: SynthesizeSpeechInput\n): Promise<{ success: boolean; data: SynthesizeSpeechOutput | null; error: string | null; }> {\n  try {\n    const result = await synthesizeSpeech(data);\n    return { success: true, data: result, error: null };\n  } catch (error) {\n    console.error(error);\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to get recipe speech: ${errorMessage}` };\n  }\n}\n\nexport async function getIngredientSubstitution(\n  data: SuggestSubstitutionsInput\n): Promise<{ success: boolean; data: SuggestSubstitutionsOutput | null; error: string | null; }> {\n  try {\n    const result = await suggestSubstitutions(data);\n    return { success: true, data: result, error: null };\n  } catch (error) {\n    console.error(error);\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to get ingredient substitution: ${errorMessage}` };\n  }\n}\n"],"names":[],"mappings":";;;;;;;;AAEA;;;;;AAeO,eAAe,oBACpB,IAAyB;IAEzB,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,uIAAA,CAAA,iBAAc,AAAD,EAAE;QACpC,OAAO;YAAE,SAAS;YAAM,MAAM;YAAQ,OAAO;QAAK;IACpD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC9D,OAAO;YAAE,SAAS;YAAO,MAAM;YAAM,OAAO,CAAC,iCAAiC,EAAE,cAAc;QAAC;IACjG;AACF;AAEO,eAAe,eACpB,IAA8B;IAE7B,IAAI;QACH,MAAM,SAAS,MAAM,CAAA,GAAA,uIAAA,CAAA,sBAAmB,AAAD,EAAE;QACzC,OAAO;YAAE,SAAS;YAAM,MAAM;YAAQ,OAAO;QAAK;IACpD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC9D,OAAO;YAAE,SAAS;YAAO,MAAM;YAAM,OAAO,CAAC,4BAA4B,EAAE,cAAc;QAAC;IAC5F;AACF;AAEO,eAAe,gBACpB,IAA2B;IAE3B,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD,EAAE;QACtC,OAAO;YAAE,SAAS;YAAM,MAAM;YAAQ,OAAO;QAAK;IACpD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC9D,OAAO;YAAE,SAAS;YAAO,MAAM;YAAM,OAAO,CAAC,6BAA6B,EAAE,cAAc;QAAC;IAC7F;AACF;AAEO,eAAe,0BACpB,IAA+B;IAE/B,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,uIAAA,CAAA,uBAAoB,AAAD,EAAE;QAC1C,OAAO;YAAE,SAAS;YAAM,MAAM;YAAQ,OAAO;QAAK;IACpD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC9D,OAAO;YAAE,SAAS;YAAO,MAAM;YAAM,OAAO,CAAC,uCAAuC,EAAE,cAAc;QAAC;IACvG;AACF;;;IAlDsB;IAaA;IAaA;IAaA;;AAvCA,+OAAA;AAaA,+OAAA;AAaA,+OAAA;AAaA,+OAAA","debugId":null}},
    {"offset": {"line": 592, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getRecipeSuggestion as '40aa3fc55daf9edee8c8c4e69b8d1ee15da1b642a6'} from 'ACTIONS_MODULE0'\nexport {getRecipeImage as '40c4dcd2c8fb1178189e7d08b043ea5180cc9e984e'} from 'ACTIONS_MODULE0'\nexport {getTextToSpeech as '403a3735b3315f536ec00120ff3ad534b6418a1c9c'} from 'ACTIONS_MODULE0'\nexport {getIngredientSubstitution as '404532642a4b0717d3fd12a87bde4aefaf0f739a7e'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 653, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 667, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 681, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}