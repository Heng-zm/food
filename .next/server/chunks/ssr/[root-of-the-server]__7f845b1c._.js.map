{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/text-to-speech.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview A flow for converting text to speech.\n *\n * - textToSpeech - A function that converts text into an audio data URI.\n * - TextToSpeechInput - The input type for the textToSpeech function.\n * - TextToSpeechOutput - The return type for the textToSpeech function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\nimport wav from 'wav';\nimport { googleAI } from '@genkit-ai/googleai';\n\nconst TextToSpeechInputSchema = z.object({\n  text: z.string().describe('The text to be converted to speech.'),\n});\nexport type TextToSpeechInput = z.infer<typeof TextToSpeechInputSchema>;\n\nconst TextToSpeechOutputSchema = z.object({\n  audioUrl: z.string().describe(\"A data URI of the generated audio. Expected format: 'data:audio/wav;base64,<encoded_data>'.\"),\n});\nexport type TextToSpeechOutput = z.infer<typeof TextToSpeechOutputSchema>;\n\nexport async function textToSpeech(input: TextToSpeechInput): Promise<TextToSpeechOutput> {\n  return textToSpeechFlow(input);\n}\n\nasync function toWav(\n  pcmData: Buffer,\n  channels = 1,\n  rate = 24000,\n  sampleWidth = 2\n): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const writer = new wav.Writer({\n      channels,\n      sampleRate: rate,\n      bitDepth: sampleWidth * 8,\n    });\n\n    let bufs: Buffer[] = [];\n    writer.on('error', reject);\n    writer.on('data', function (d) {\n      bufs.push(d);\n    });\n    writer.on('end', function () {\n      resolve(Buffer.concat(bufs).toString('base64'));\n    });\n\n    writer.write(pcmData);\n    writer.end();\n  });\n}\n\nconst textToSpeechFlow = ai.defineFlow(\n  {\n    name: 'textToSpeechFlow',\n    inputSchema: TextToSpeechInputSchema,\n    outputSchema: TextToSpeechOutputSchema,\n  },\n  async ({ text }) => {\n    const { media } = await ai.generate({\n      model: googleAI.model('gemini-2.5-flash-preview-tts'),\n      config: {\n        responseModalities: ['AUDIO'],\n        speechConfig: {\n          voiceConfig: {\n            prebuiltVoiceConfig: { voiceName: 'Algenib' },\n          },\n        },\n      },\n      prompt: text,\n    });\n\n    if (!media) {\n      throw new Error('No media was returned from the TTS model.');\n    }\n\n    const audioBuffer = Buffer.from(\n      media.url.substring(media.url.indexOf(',') + 1),\n      'base64'\n    );\n    \n    const wavBase64 = await toWav(audioBuffer);\n\n    return {\n      audioUrl: `data:audio/wav;base64,${wavBase64}`,\n    };\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;AACA;AACA;AAAA;;;;;;;;AAEA,MAAM,0BAA0B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC5B;AAGA,MAAM,2BAA2B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGO,eAAe,aAAa,KAAwB;IACzD,OAAO,iBAAiB;AAC1B;AAEA,eAAe,MACb,OAAe,EACf,WAAW,CAAC,EACZ,OAAO,KAAK,EACZ,cAAc,CAAC;IAEf,OAAO,IAAI,QAAQ,CAAC,SAAS;QAC3B,MAAM,SAAS,IAAI,4HAAA,CAAA,UAAG,CAAC,MAAM,CAAC;YAC5B;YACA,YAAY;YACZ,UAAU,cAAc;QAC1B;QAEA,IAAI,OAAiB,EAAE;QACvB,OAAO,EAAE,CAAC,SAAS;QACnB,OAAO,EAAE,CAAC,QAAQ,SAAU,CAAC;YAC3B,KAAK,IAAI,CAAC;QACZ;QACA,OAAO,EAAE,CAAC,OAAO;YACf,QAAQ,OAAO,MAAM,CAAC,MAAM,QAAQ,CAAC;QACvC;QAEA,OAAO,KAAK,CAAC;QACb,OAAO,GAAG;IACZ;AACF;AAEA,MAAM,mBAAmB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACpC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO,EAAE,IAAI,EAAE;IACb,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,mHAAA,CAAA,KAAE,CAAC,QAAQ,CAAC;QAClC,OAAO,2KAAA,CAAA,WAAQ,CAAC,KAAK,CAAC;QACtB,QAAQ;YACN,oBAAoB;gBAAC;aAAQ;YAC7B,cAAc;gBACZ,aAAa;oBACX,qBAAqB;wBAAE,WAAW;oBAAU;gBAC9C;YACF;QACF;QACA,QAAQ;IACV;IAEA,IAAI,CAAC,OAAO;QACV,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,cAAc,OAAO,IAAI,CAC7B,MAAM,GAAG,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,OAAO,CAAC,OAAO,IAC7C;IAGF,MAAM,YAAY,MAAM,MAAM;IAE9B,OAAO;QACL,UAAU,CAAC,sBAAsB,EAAE,WAAW;IAChD;AACF;;;IAjEoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 337, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/suggest-recipe.ts"],"sourcesContent":["// This file holds the Genkit flow for suggesting recipes based on user-provided ingredients and cuisine preferences.\n\n'use server';\n\n/**\n * @fileOverview Recipe suggestion flow.\n *\n * - suggestRecipe - A function that suggests recipes based on available ingredients and desired cuisine.\n * - getRecipeDetails - A function that gets the image and audio for a specific recipe.\n * - suggestRecipeAndDetails - A function that suggests a single recipe and fetches its details.\n * - SuggestRecipeInput - The input type for the suggestRecipe function.\n * - Recipe - A single recipe object.\n * - SuggestRecipeOutput - The return type for the suggestRecipe function.\n * - GetRecipeDetailsInput - The input type for the getRecipeDetails function.\n * - GetRecipeDetailsOutput - The return type for the getRecipeDetails function.\n * - GetAudioForRecipeInput - The input type for the getAudioForRecipe function.\n * - GetAudioForRecipeOutput - The return type for the getAudioForRecipe function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\nimport { textToSpeech } from './text-to-speech';\n\nconst SuggestRecipeInputSchema = z.object({\n  ingredients: z\n    .string()\n    .describe('បញ្ជីគ្រឿងផ្សំដែលមាន រាយដោយមានសញ្ញាក្បៀស។'),\n  cuisine: z.string().describe('ប្រភេទម្ហូបដែលចង់បាន (ឧ. ខ្មែរ, អ៊ីតាលី)។'),\n});\nexport type SuggestRecipeInput = z.infer<typeof SuggestRecipeInputSchema>;\n\nconst RecipeSchema = z.object({\n  recipeName: z.string().describe('ឈ្មោះរូបមន្តដែលបានណែនាំ។'),\n  ingredients: z.string().describe('បញ្ជីគ្រឿងផ្សំដែលត្រូវការសម្រាប់រូបមន្ត។ បំបែកធាតុនីមួយៗដោយសញ្ញាបន្ទាត់ថ្មី (\\\\n)។'),\n  instructions: z.string().describe('ការណែនាំអំពីការរៀបចំរូបមន្តមួយជំហានម្តងៗ។ បំបែកជំហាននីមួយៗដោយសញ្ញាបន្ទាត់ថ្មី (\\\\n)។'),\n  estimatedCookingTime: z.string().describe('ពេលវេលាចម្អិនអាហារប៉ាន់ស្មាន (ឧ. 30 នាទី)។'),\n  nutritionalInformation: z.string().describe('ព័ត៌មានអាហារូបត្ថម្ភសម្រាប់រូបមន្ត។'),\n  imageUrl: z.string().optional().describe('URL នៃរូបភាពនៃរូបមន្ត។'),\n  audioUrl: z.string().optional().describe(\"URL ទិន្នន័យនៃសំឡេងនៃការណែនាំ។\"),\n});\nexport type Recipe = z.infer<typeof RecipeSchema>;\n\nconst SuggestRecipeOutputSchema = z.object({\n  recipes: z.array(RecipeSchema.omit({ imageUrl: true, audioUrl: true })).describe('បញ្ជីរូបមន្តដែលបានណែនាំចំនួន 5 ។'),\n});\nexport type SuggestRecipeOutput = z.infer<typeof SuggestRecipeOutputSchema>;\n\nexport async function suggestRecipe(input: SuggestRecipeInput): Promise<SuggestRecipeOutput> {\n  return suggestRecipeFlow(input);\n}\n\nconst recipePrompt = ai.definePrompt({\n  name: 'recipePrompt',\n  input: {schema: SuggestRecipeInputSchema},\n  output: {\n    format: 'json',\n    schema: SuggestRecipeOutputSchema,\n  },\n  prompt: `អ្នកគឺជាចុងភៅលំដាប់ពិភពលោក ដែលមានជំនាញក្នុងការបង្កើតរូបមន្តឆ្ងាញ់ៗ ដោយផ្អែកលើគ្រឿងផ្សំដែលមាន និងចំណូលចិត្តម្ហូប។\n\n  សូមផ្តល់ការឆ្លើយតបទាំងមូលជាភាសាខ្មែរ (កម្ពុជា)។\n\n  ដោយផ្អែកលើគ្រឿងផ្សំ និងម្ហូបដែលបានផ្តល់ សូមណែនាំរូបមន្តលម្អិតចំនួន 5 ។\n\n  គ្រឿងផ្សំ៖ {{{ingredients}}}\n  ម្ហូប៖ {{{cuisine}}}\n\n  ត្រូវប្រាកដថាការឆ្លើយតបរបស់អ្នកជាទម្រង់ JSON ដែលអាចញែកបាន ដែលគោរពតាម schema ដែលបានផ្តល់ឱ្យ។\n`,\n});\n\nconst suggestRecipeFlow = ai.defineFlow(\n  {\n    name: 'suggestRecipeFlow',\n    inputSchema: SuggestRecipeInputSchema,\n    outputSchema: SuggestRecipeOutputSchema,\n  },\n  async input => {\n    const {output} = await recipePrompt(input);\n    return output!;\n  }\n);\n\n\n// Flow to get details (image) for a single recipe\nconst GetRecipeDetailsInputSchema = z.object({\n  recipeName: z.string(),\n});\nexport type GetRecipeDetailsInput = z.infer<typeof GetRecipeDetailsInputSchema>;\n\nconst GetRecipeDetailsOutputSchema = z.object({\n  imageUrl: z.string().describe('URL នៃរូបភាពនៃរូបមន្ត។'),\n});\nexport type GetRecipeDetailsOutput = z.infer<typeof GetRecipeDetailsOutputSchema>;\n\n\nexport async function getRecipeDetails(input: GetRecipeDetailsInput): Promise<GetRecipeDetailsOutput> {\n  return getRecipeDetailsFlow(input);\n}\n\nconst getRecipeDetailsFlow = ai.defineFlow(\n  {\n    name: 'getRecipeDetailsFlow',\n    inputSchema: GetRecipeDetailsInputSchema,\n    outputSchema: GetRecipeDetailsOutputSchema,\n  },\n  async ({ recipeName }) => {\n    const imageUrl = `https://source.unsplash.com/800x600/?${encodeURIComponent(recipeName)}`;\n    return {\n      imageUrl: imageUrl,\n    };\n  }\n);\n\n\n// Flow to get audio for a single recipe\nconst GetAudioForRecipeInputSchema = z.object({\n  instructions: z.string(),\n});\nexport type GetAudioForRecipeInput = z.infer<typeof GetAudioForRecipeInputSchema>;\n\nconst GetAudioForRecipeOutputSchema = z.object({\n  audioUrl: z.string().describe(\"URL ទិន្នន័យនៃសំឡេងនៃការណែនាំ។\"),\n});\nexport type GetAudioForRecipeOutput = z.infer<typeof GetAudioForRecipeOutputSchema>;\n\n\nexport async function getAudioForRecipe(input: GetAudioForRecipeInput): Promise<GetAudioForRecipeOutput> {\n  return getAudioForRecipeFlow(input);\n}\n\nconst getAudioForRecipeFlow = ai.defineFlow(\n  {\n    name: 'getAudioForRecipeFlow',\n    inputSchema: GetAudioForRecipeInputSchema,\n    outputSchema: GetAudioForRecipeOutputSchema,\n  },\n  async ({ instructions }) => {\n    const audioResult = await textToSpeech({text: `ការណែនាំ៖\\n${instructions}`});\n\n    return {\n      audioUrl: audioResult.audioUrl,\n    };\n  }\n);"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 476, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\"use server\";\n\nimport { \n  suggestRecipe, \n  getRecipeDetails,\n  getAudioForRecipe,\n  type SuggestRecipeInput, \n  type SuggestRecipeOutput,\n  type GetRecipeDetailsInput,\n  type GetRecipeDetailsOutput,\n  type GetAudioForRecipeInput,\n  type GetAudioForRecipeOutput,\n} from '@/ai/flows/suggest-recipe';\n\nexport async function getRecipeSuggestion(\n  data: SuggestRecipeInput\n): Promise<{ success: boolean; data: SuggestRecipeOutput | null; error: string | null; }> {\n  try {\n    const recipe = await suggestRecipe(data);\n    return { success: true, data: recipe, error: null };\n  } catch (error) {\n    console.error(error);\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to get recipe suggestion. ${errorMessage}` };\n  }\n}\n\nexport async function getRecipeDetailsAction(\n  data: GetRecipeDetailsInput\n): Promise<{ success: boolean; data: GetRecipeDetailsOutput | null; error: string | null; }> {\n  try {\n    const details = await getRecipeDetails(data);\n    return { success: true, data: details, error: null };\n  } catch (error) {\n    console.error(error);\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to get recipe details. ${errorMessage}` };\n  }\n}\n\nexport async function getAudioForRecipeAction(\n  data: GetAudioForRecipeInput\n): Promise<{ success: boolean; data: GetAudioForRecipeOutput | null; error: string | null; }> {\n  try {\n    const details = await getAudioForRecipe(data);\n    return { success: true, data: details, error: null };\n  } catch (error) {\n    console.error(error);\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to get audio. ${errorMessage}` };\n  }\n}"],"names":[],"mappings":";;;;;;;AAEA;;;;;AAYO,eAAe,oBACpB,IAAwB;IAExB,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,uIAAA,CAAA,gBAAa,AAAD,EAAE;QACnC,OAAO;YAAE,SAAS;YAAM,MAAM;YAAQ,OAAO;QAAK;IACpD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC9D,OAAO;YAAE,SAAS;YAAO,MAAM;YAAM,OAAO,CAAC,iCAAiC,EAAE,cAAc;QAAC;IACjG;AACF;AAEO,eAAe,uBACpB,IAA2B;IAE3B,IAAI;QACF,MAAM,UAAU,MAAM,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD,EAAE;QACvC,OAAO;YAAE,SAAS;YAAM,MAAM;YAAS,OAAO;QAAK;IACrD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC9D,OAAO;YAAE,SAAS;YAAO,MAAM;YAAM,OAAO,CAAC,8BAA8B,EAAE,cAAc;QAAC;IAC9F;AACF;AAEO,eAAe,wBACpB,IAA4B;IAE5B,IAAI;QACF,MAAM,UAAU,MAAM,CAAA,GAAA,uIAAA,CAAA,oBAAiB,AAAD,EAAE;QACxC,OAAO;YAAE,SAAS;YAAM,MAAM;YAAS,OAAO;QAAK;IACrD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC9D,OAAO;YAAE,SAAS;YAAO,MAAM;YAAM,OAAO,CAAC,qBAAqB,EAAE,cAAc;QAAC;IACrF;AACF;;;IArCsB;IAaA;IAaA;;AA1BA,+OAAA;AAaA,+OAAA;AAaA,+OAAA","debugId":null}},
    {"offset": {"line": 557, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getRecipeSuggestion as '40aa3fc55daf9edee8c8c4e69b8d1ee15da1b642a6'} from 'ACTIONS_MODULE0'\nexport {getRecipeDetailsAction as '40ddeef526be29027e9482a3d131d97b6609769f70'} from 'ACTIONS_MODULE0'\nexport {getAudioForRecipeAction as '4072f449b9b84710caba97820d55fe8ed5df361598'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 615, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 629, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 643, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}