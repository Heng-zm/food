{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/suggest-recipe.ts"],"sourcesContent":["// This file holds the Genkit flow for suggesting recipes based on user-provided ingredients and cuisine preferences.\n\n'use server';\n\n/**\n * @fileOverview Recipe suggestion flow.\n *\n * - suggestRecipes - A function that suggests a list of recipes based on available ingredients and desired cuisine.\n * - getRecipeDetails - A function that gets the image for a specific recipe.\n * - suggestRecipeAndDetails - A function that suggests recipes and fetches their details (images).\n * - SuggestRecipesInput - The input type for the suggestRecipes function.\n * - Recipe - A single recipe object.\n * - SuggestRecipeAndDetailsOutput - The return type for the suggestRecipeAndDetails function.\n * - GetRecipeDetailsInput - The input type for the getRecipeDetails function.\n * - GetRecipeDetailsOutput - The return type for the getRecipeDetails function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst SuggestRecipesInputSchema = z.object({\n  ingredients: z\n    .string()\n    .describe('បញ្ជីគ្រឿងផ្សំដែលមាន រាយដោយមានសញ្ញាក្បៀស។'),\n  cuisine: z.string().describe('ប្រភេទម្ហូបដែលចង់បាន (ឧ. ខ្មែរ, អ៊ីតាលី)។'),\n});\nexport type SuggestRecipesInput = z.infer<typeof SuggestRecipesInputSchema>;\n\nconst RecipeSchema = z.object({\n  recipeName: z.string().describe('ឈ្មោះរូបមន្តដែលបានណែនាំ។'),\n  ingredients: z.string().describe('បញ្ជីគ្រឿងផ្សំដែលត្រូវការសម្រាប់រូបមន្ត។ បំបែកធាតុនីមួយៗដោយសញ្ញាបន្ទាត់ថ្មី (\\\\n)។'),\n  instructions: z.string().describe('ការណែនាំអំពីការរៀបចំរូបមន្តមួយជំហានម្តងៗ។ បំបែកជំហាននីមួយៗដោយសញ្ញាបន្ទាត់ថ្មី (\\\\n)។'),\n  estimatedCookingTime: z.string().describe('ពេលវេលាចម្អិនអាហារប៉ាន់ស្មាន (ឧ. 30 នាទី)។'),\n  imageUrl: z.string().optional().describe('URL នៃរូបភាពនៃរូបមន្ត។'),\n});\nexport type Recipe = z.infer<typeof RecipeSchema>;\n\nconst SuggestRecipesOutputSchema = z.object({\n  recipes: z.array(RecipeSchema.omit({ imageUrl: true })),\n});\nexport type SuggestRecipesOutput = z.infer<typeof SuggestRecipesOutputSchema>;\n\nconst SuggestRecipeAndDetailsOutputSchema = z.object({\n  recipes: z.array(RecipeSchema).describe('The suggested recipes with their images.'),\n});\nexport type SuggestRecipeAndDetailsOutput = z.infer<typeof SuggestRecipeAndDetailsOutputSchema>;\n\nexport async function suggestRecipes(input: SuggestRecipesInput): Promise<SuggestRecipesOutput> {\n  return suggestRecipesFlow(input);\n}\n\nconst recipePrompt = ai.definePrompt({\n  name: 'recipePrompt',\n  input: {schema: SuggestRecipesInputSchema},\n  output: {\n    format: 'json',\n    schema: SuggestRecipesOutputSchema,\n  },\n  prompt: `You are a world-class chef specializing in creating delicious recipes based on available ingredients and cuisine preferences.\n\n  Please provide the entire response in Khmer (Cambodia).\n\n  Based on the provided ingredients and cuisine, suggest 5 distinct, excellent, detailed recipes.\n\n  Ingredients: {{{ingredients}}}\n  Cuisine: {{{cuisine}}}\n\n  Ensure your response is a parsable JSON object that adheres to the provided schema.\n`,\n});\n\nconst suggestRecipesFlow = ai.defineFlow(\n  {\n    name: 'suggestRecipesFlow',\n    inputSchema: SuggestRecipesInputSchema,\n    outputSchema: SuggestRecipesOutputSchema,\n  },\n  async input => {\n    const {output} = await recipePrompt(input);\n    return output!;\n  }\n);\n\n// Flow to get details (image) for a single recipe\nconst GetRecipeDetailsInputSchema = z.object({\n  recipeName: z.string(),\n});\nexport type GetRecipeDetailsInput = z.infer<typeof GetRecipeDetailsInputSchema>;\n\nconst GetRecipeDetailsOutputSchema = z.object({\n  imageUrl: z.string().describe('URL នៃរូបភាពនៃរូបមន្ត។'),\n});\nexport type GetRecipeDetailsOutput = z.infer<typeof GetRecipeDetailsOutputSchema>;\n\nexport async function getRecipeDetails(input: GetRecipeDetailsInput): Promise<GetRecipeDetailsOutput> {\n  return getRecipeDetailsFlow(input);\n}\n\nconst getRecipeDetailsFlow = ai.defineFlow(\n  {\n    name: 'getRecipeDetailsFlow',\n    inputSchema: GetRecipeDetailsInputSchema,\n    outputSchema: GetRecipeDetailsOutputSchema,\n  },\n  async ({ recipeName }) => {\n    try {\n      const { media } = await ai.generate({\n        model: 'googleai/gemini-2.0-flash-preview-image-generation',\n        prompt: `Generate a photorealistic, beautifully plated, and delicious-looking image of the Khmer food dish: '${recipeName}'. The background should be clean and simple to emphasize the food.`,\n        config: {\n          responseModalities: ['TEXT', 'IMAGE'],\n        },\n      });\n\n      if (!media.url) {\n        throw new Error('Image generation failed to return a URL.');\n      }\n      \n      return {\n        imageUrl: media.url,\n      };\n    } catch (error) {\n       console.error(`Failed to generate image for ${recipeName}:`, error);\n       // Return a placeholder on failure to avoid breaking the whole list\n       return { imageUrl: \"https://placehold.co/600x400.png\" };\n    }\n  }\n);\n\n// New flow that combines recipe suggestion and image generation\nexport async function suggestRecipeAndDetails(input: SuggestRecipesInput): Promise<SuggestRecipeAndDetailsOutput> {\n  return suggestRecipeAndDetailsFlow(input);\n}\n\nconst suggestRecipeAndDetailsFlow = ai.defineFlow(\n  {\n    name: 'suggestRecipeAndDetailsFlow',\n    inputSchema: SuggestRecipesInputSchema,\n    outputSchema: SuggestRecipeAndDetailsOutputSchema,\n  },\n  async (input) => {\n    let suggestionResult: SuggestRecipesOutput | null = null;\n    \n    // Retry logic for recipe suggestion\n    for (let i = 0; i < 2; i++) {\n      try {\n        suggestionResult = await suggestRecipesFlow(input);\n        if (suggestionResult?.recipes?.length > 0) {\n          break; // Success, exit loop\n        }\n      } catch (error) {\n        console.error(`Attempt ${i + 1} to get recipe suggestion failed:`, error);\n        if (i === 1) { // If it's the last attempt, re-throw the error\n          throw error;\n        }\n      }\n    }\n    \n    if (!suggestionResult || !suggestionResult.recipes || suggestionResult.recipes.length === 0) {\n      throw new Error(\"Failed to get any recipe suggestions after multiple attempts.\");\n    }\n    \n    const recipesWithDetails: Recipe[] = [];\n\n    // Use a sequential for...of loop to avoid rate limiting\n    for (const recipe of suggestionResult.recipes) {\n        const details = await getRecipeDetailsFlow({ recipeName: recipe.recipeName });\n        recipesWithDetails.push({ ...recipe, imageUrl: details.imageUrl });\n    }\n\n    return { recipes: recipesWithDetails };\n  }\n);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 402, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\"use server\";\n\nimport { \n  suggestRecipeAndDetails,\n  type SuggestRecipesInput, \n  type SuggestRecipeAndDetailsOutput,\n} from '@/ai/flows/suggest-recipe';\n\nexport async function getRecipeSuggestion(\n  data: SuggestRecipesInput\n): Promise<{ success: boolean; data: SuggestRecipeAndDetailsOutput | null; error: string | null; }> {\n  try {\n    const result = await suggestRecipeAndDetails(data);\n    return { success: true, data: result, error: null };\n  } catch (error) {\n    console.error(error);\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to get recipe suggestion: ${errorMessage}` };\n  }\n}\n"],"names":[],"mappings":";;;;;AAEA;;;;;AAMO,eAAe,oBACpB,IAAyB;IAEzB,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,uIAAA,CAAA,0BAAuB,AAAD,EAAE;QAC7C,OAAO;YAAE,SAAS;YAAM,MAAM;YAAQ,OAAO;QAAK;IACpD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC9D,OAAO;YAAE,SAAS;YAAO,MAAM;YAAM,OAAO,CAAC,iCAAiC,EAAE,cAAc;QAAC;IACjG;AACF;;;IAXsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 441, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getRecipeSuggestion as '40aa3fc55daf9edee8c8c4e69b8d1ee15da1b642a6'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 493, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 507, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 521, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}