{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/suggest-recipe.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview Recipe suggestion and image generation flows.\n *\n * - suggestRecipes - Suggests a list of recipes based on ingredients and cuisine.\n * - generateRecipeImage - Generates an image for a specific recipe name.\n * - SuggestRecipesInput - The input type for the suggestRecipes function.\n * - Recipe - A single recipe object.\n * - SuggestRecipesOutput - The return type for the suggestRecipes function.\n * - GenerateRecipeImageInput - The input type for the generateRecipeImage function.\n * - GenerateRecipeImageOutput - The return type for the generateRecipeImage function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\n// Schema for recipe suggestion input\nconst SuggestRecipesInputSchema = z.object({\n  ingredients: z\n    .string()\n    .describe('បញ្ជីគ្រឿងផ្សំដែលមាន រាយដោយមានសញ្ញាក្បៀស។'),\n  cuisine: z.string().describe('ប្រភេទម្ហូបដែលចង់បាន (ឧ. ខ្មែរ, អ៊ីតាលី)។'),\n});\nexport type SuggestRecipesInput = z.infer<typeof SuggestRecipesInputSchema>;\n\n// Schema for a single recipe\nconst RecipeSchema = z.object({\n  recipeName: z.string().describe('ឈ្មោះរូបមន្តដែលបានណែនាំ។'),\n  ingredients: z.string().describe('បញ្ជីគ្រឿងផ្សំដែលត្រូវការសម្រាប់រូបមន្ត។ បំបែកធាតុនីមួយៗដោយសញ្ញាបន្ទាត់ថ្មី (\\\\n)។'),\n  instructions: z.string().describe('ការណែនាំអំពីការរៀបចំរូបមន្តមួយជំហានម្តងៗ។ បំបែកជំហាននីមួយៗដោយសញ្ញាបន្ទាត់ថ្មី (\\\\n)។'),\n  estimatedCookingTime: z.string().describe('ពេលវេលាចម្អិនអាហារប៉ាន់ស្មាន (ឧ. 30 នាទី)។'),\n});\nexport type Recipe = z.infer<typeof RecipeSchema>;\n\n// Schema for the output of the recipe suggestion flow\nconst SuggestRecipesOutputSchema = z.object({\n  recipes: z.array(RecipeSchema),\n});\nexport type SuggestRecipesOutput = z.infer<typeof SuggestRecipesOutputSchema>;\n\n// Main function to suggest recipes\nexport async function suggestRecipes(\n  input: SuggestRecipesInput\n): Promise<SuggestRecipesOutput> {\n  return suggestRecipesFlow(input);\n}\n\nconst recipePrompt = ai.definePrompt({\n  name: 'recipePrompt',\n  input: {schema: SuggestRecipesInputSchema},\n  output: {\n    format: 'json',\n    schema: SuggestRecipesOutputSchema,\n  },\n  prompt: `You are a world-class chef specializing in creating delicious recipes based on available ingredients and cuisine preferences.\n\n  Please provide the entire response in Khmer (Cambodia).\n\n  Based on the provided ingredients and cuisine, suggest 5 distinct, excellent, detailed recipes.\n\n  Ingredients: {{{ingredients}}}\n  Cuisine: {{{cuisine}}}\n\n  Ensure your response is a parsable JSON object that adheres to the provided schema.\n`,\n});\n\nconst suggestRecipesFlow = ai.defineFlow(\n  {\n    name: 'suggestRecipesFlow',\n    inputSchema: SuggestRecipesInputSchema,\n    outputSchema: SuggestRecipesOutputSchema,\n  },\n  async input => {\n    const {output} = await recipePrompt(input);\n    return output!;\n  }\n);\n\n\n// Schemas and flow for generating a recipe image\nconst GenerateRecipeImageInputSchema = z.object({\n    recipeName: z.string().describe(\"The name of the recipe to generate an image for.\"),\n});\nexport type GenerateRecipeImageInput = z.infer<typeof GenerateRecipeImageInputSchema>;\n\nconst GenerateRecipeImageOutputSchema = z.object({\n    imageUrl: z.string().describe(\"The data URI of the generated image.\"),\n});\nexport type GenerateRecipeImageOutput = z.infer<typeof GenerateRecipeImageOutputSchema>;\n\n\nexport async function generateRecipeImage(input: GenerateRecipeImageInput): Promise<GenerateRecipeImageOutput> {\n    return generateRecipeImageFlow(input);\n}\n\nconst generateRecipeImageFlow = ai.defineFlow(\n    {\n        name: 'generateRecipeImageFlow',\n        inputSchema: GenerateRecipeImageInputSchema,\n        outputSchema: GenerateRecipeImageOutputSchema,\n    },\n    async ({ recipeName }) => {\n        const prompt = `A photorealistic, beautifully lit, appetizing photo of a finished plate of ${recipeName}, traditional Khmer style.`;\n        \n        try {\n            const { media } = await ai.generate({\n                model: 'googleai/gemini-2.0-flash-preview-image-generation',\n                prompt: prompt,\n                config: {\n                    responseModalities: ['IMAGE'],\n                },\n            });\n\n            if (media?.url) {\n                return { imageUrl: media.url };\n            }\n             // On failure, return an empty string to satisfy the schema.\n             return { imageUrl: \"\" };\n\n        } catch (error) {\n             console.error(`Failed to generate image for \"${recipeName}\":`, error);\n              // On error, return an empty string to satisfy the schema.\n             return { imageUrl: \"\" };\n        }\n    }\n);\n"],"names":[],"mappings":";;;;;;AAGA;;;;;;;;;;CAUC,GAED;AACA;AAAA;;;;;;AAEA,qCAAqC;AACrC,MAAM,4BAA4B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzC,aAAa,uIAAA,CAAA,IAAC,CACX,MAAM,GACN,QAAQ,CAAC;IACZ,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC/B;AAGA,6BAA6B;AAC7B,MAAM,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5B,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,sBAAsB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC5C;AAGA,sDAAsD;AACtD,MAAM,6BAA6B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,SAAS,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC;AACnB;AAIO,eAAe,eACpB,KAA0B;IAE1B,OAAO,mBAAmB;AAC5B;AAEA,MAAM,eAAe,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACnC,MAAM;IACN,OAAO;QAAC,QAAQ;IAAyB;IACzC,QAAQ;QACN,QAAQ;QACR,QAAQ;IACV;IACA,QAAQ,CAAC;;;;;;;;;;AAUX,CAAC;AACD;AAEA,MAAM,qBAAqB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACtC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,aAAa;IACpC,OAAO;AACT;AAIF,iDAAiD;AACjD,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5C,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACpC;AAGA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7C,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAClC;AAIO,eAAe,oBAAoB,KAA+B;IACrE,OAAO,wBAAwB;AACnC;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,UAAU,CACzC;IACI,MAAM;IACN,aAAa;IACb,cAAc;AAClB,GACA,OAAO,EAAE,UAAU,EAAE;IACjB,MAAM,SAAS,CAAC,2EAA2E,EAAE,WAAW,0BAA0B,CAAC;IAEnI,IAAI;QACA,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,mHAAA,CAAA,KAAE,CAAC,QAAQ,CAAC;YAChC,OAAO;YACP,QAAQ;YACR,QAAQ;gBACJ,oBAAoB;oBAAC;iBAAQ;YACjC;QACJ;QAEA,IAAI,OAAO,KAAK;YACZ,OAAO;gBAAE,UAAU,MAAM,GAAG;YAAC;QACjC;QACC,4DAA4D;QAC5D,OAAO;YAAE,UAAU;QAAG;IAE3B,EAAE,OAAO,OAAO;QACX,QAAQ,KAAK,CAAC,CAAC,8BAA8B,EAAE,WAAW,EAAE,CAAC,EAAE;QAC9D,0DAA0D;QAC3D,OAAO;YAAE,UAAU;QAAG;IAC3B;AACJ;;;IApFkB;IAmDA;;AAnDA,+OAAA;AAmDA,+OAAA","debugId":null}},
    {"offset": {"line": 356, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\"use server\";\n\nimport { \n  suggestRecipes,\n  type SuggestRecipesInput, \n  type SuggestRecipesOutput,\n  generateRecipeImage,\n  type GenerateRecipeImageInput,\n  type GenerateRecipeImageOutput,\n} from '@/ai/flows/suggest-recipe';\n\nexport async function getRecipeSuggestion(\n  data: SuggestRecipesInput\n): Promise<{ success: boolean; data: SuggestRecipesOutput | null; error: string | null; }> {\n  try {\n    const result = await suggestRecipes(data);\n    return { success: true, data: result, error: null };\n  } catch (error) {\n    console.error(error);\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to get recipe suggestion: ${errorMessage}` };\n  }\n}\n\nexport async function getRecipeImage(\n  data: GenerateRecipeImageInput\n): Promise<{ success: boolean; data: GenerateRecipeImageOutput | null; error: string | null; }> {\n   try {\n    const result = await generateRecipeImage(data);\n    return { success: true, data: result, error: null };\n  } catch (error) {\n    console.error(error);\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to get recipe image: ${errorMessage}` };\n  }\n}\n"],"names":[],"mappings":";;;;;;AAEA;;;;;AASO,eAAe,oBACpB,IAAyB;IAEzB,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,uIAAA,CAAA,iBAAc,AAAD,EAAE;QACpC,OAAO;YAAE,SAAS;YAAM,MAAM;YAAQ,OAAO;QAAK;IACpD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC9D,OAAO;YAAE,SAAS;YAAO,MAAM;YAAM,OAAO,CAAC,iCAAiC,EAAE,cAAc;QAAC;IACjG;AACF;AAEO,eAAe,eACpB,IAA8B;IAE7B,IAAI;QACH,MAAM,SAAS,MAAM,CAAA,GAAA,uIAAA,CAAA,sBAAmB,AAAD,EAAE;QACzC,OAAO;YAAE,SAAS;YAAM,MAAM;YAAQ,OAAO;QAAK;IACpD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC9D,OAAO;YAAE,SAAS;YAAO,MAAM;YAAM,OAAO,CAAC,4BAA4B,EAAE,cAAc;QAAC;IAC5F;AACF;;;IAxBsB;IAaA;;AAbA,+OAAA;AAaA,+OAAA","debugId":null}},
    {"offset": {"line": 416, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getRecipeSuggestion as '40aa3fc55daf9edee8c8c4e69b8d1ee15da1b642a6'} from 'ACTIONS_MODULE0'\nexport {getRecipeImage as '40c4dcd2c8fb1178189e7d08b043ea5180cc9e984e'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 471, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 485, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 499, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}